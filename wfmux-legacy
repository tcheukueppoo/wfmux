#!/bin/sh
#
# Copyright (C) 2022 kueppo, <kueppo@paranoid.cm>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Author:  <kueppo@paranoid.dev>
# Created: 2022-01-15

# FIXME: 
# 1. wfmux skipped an unoccupied window to open a new one.
# 2. wfmux doesn't use any of the 2 panes with label 'bash' and exits

# echo is not posix compliant
as_echo='printf %s'
as_echo_n='printf %s\n'

me=`$as_echo_n "$0" | sed -e 's,.*/,,'`

config_dir="${XDG_CONFIG_HOME:-$HOME/.config}"
config="$config_dir/wfmux.conf"

cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}"
cache="$cache_dir/wfmux-tags"

cmd_set="$config_dir/wfmux-cmdset"

# these regexs define lines format of the command set
careg='^\w+:.*$'
empty='^[\t ]*#\?$'
digit='^[[:digit:]]+$'
idle_regex="s/^(${SHELL##*/}:.*$/\1/"

# it must be a variable assignement
asign='^[\t ]*\w+=('\''.+'\''|".+"|[0-9]+)[\t ]*$'

is_install() {
	command -v "$1" >/dev/null || return 1;
}

if ! is_install xdg-open; then
	is_install zathura && pdf_viewer=zathura
	is_install feh     && image_viewer=feh
	is_install nvim    && text_editor=nvim
	is_install ffplay  && media_player=ffplay
	{ is_install vis   && test -n "$text_editor"; }  && text_editor=vis
	{ is_install mpv   && test -n "$media_player"; } && media_player=mpv
fi

# The directory where all the projects resides
project_list="$HOME/projects"

# main program to run
prog=

# whole program, a_prog="$prog arg1 arg2 .... argn"
a_prog=

USAGE='

'


# parse configuration file
parse_config() {
	count=1

	test -f "$config" || return 0
	while read a_config; do
		if $as_echo_n "$a_config" | grep -qE "$asign"; then
			eval $a_config
		elif $as_echo_n "$a_config" | grep -qE "$empty"; then :;
		elif $as_echo_n "$a_config" | grep -qE "$comment"; then :;
		else
			$as_echo_n "$me: ${config##*/}: error at line $count" >&2
			break
		fi
		count=$((count + 1))
	done < "$config"
}

# set_menu chooses what menu is to be use based on its availability
set_menu() {
	for menus in fzf fzy dmenu; do
		test -n "$menu" && break
		case "$menus" in
			fzy) prog_install "$menus" && menu="fzy" ;;
			fzf) prog_install "$menus" && menu="fzf +m --margin=10% --header-first --header=${1:-wfmux} --border=bottom" ;;
			dmenu) prog_install "$menus" && menu="dmenu" ;;
		esac
	done
	test -n "$menu"
}

# open_tmux
# ---------
# open_tmux either present existing sessions to attach, create a new
# session, or drop you at the terminal, this function should be called in
# your shell initialization file.
open_tmux() {
	if tmux list-sessions >/dev/null 2>&1; then
		sid=1
		$as_echo_n 'Choose a session to attach'
		$as_echo_n
		tmux list-sessions | while read session; do
			$as_echo_n "$sid) $session"
			sid=$(( sid + 1 ))
		done
	fi
	$as_echo_n
	$as_echo_n "- Enter the name of your new tmux session"
	$as_echo_n "- Type f<Return> to select your projects"
	$as_echo_n "- Type <Return> to avoid tmux"
	$as_echo ": "

	read answer && tput clear
	case "$answer" in
		F | f )
 		project=`ls -F "$project_list" | sed -n 's#\(.*\)/$#\1#p' | eval $menu`
		if test -n "$project"; then
			if test -d "${project_list%/}/$project"; then
				project=`$as_echo_n "$project" | tr _ '\034' | tr . _`
				if test -f "$cache"; then
					selected_tag=`cat "$cache" | sort -u | grep "^$project:" | cut -d: -f2`
					test -z "$selected_tag" && selected_tag=`IFS=:; $as_echo_n "$tags" | eval $menu`
					if test -n "$selected_tag"; then
						$as_echo_n "$project:$selected_tag" >> "$cache"
						tmux has-session -t "$project-$stag" >/dev/null 2>&1 && (tmux attach -t "$project-$stag"; exit 0) || tmux new-session -s "$project-$stag"
					fi
				fi
			fi
		fi ;;
		* )
		if $as_echo_n "$answer" | grep -qE "$digit"; then
			num=`tmux list-sessions | wc -l`
			if test $answer -ge 1 && test $answer -le $num; then
				target=`tmux list-sessions -F '#S' | sed -n "${answer}p"`
				tmux attach -t "$target"
			fi
		elif test -z "$answer"; then :;
		else
			tmux new-session -s "$answer"
		fi ;;
	esac
}

# sub_new_split [TMUX_WINDOW_ID]
# ------------------------------
# sub_new_split look for a free panes(no cmd running) and run a command in its
# if no pane were found, it creates a new pane to run the program ($a_prog).
sub_new_split() {
	window="$1"
	list_panes=`tmux list-panes -t "$window" -F '#{pane_current_command}:#P:#{pane_active}'`
	myshell=`$as_echo_n "$list_pane" | sed -nE "s,$idle_regex,\1,p" | head -n1`
	if test -n "$myshell"; then
		# Firstly, try to get if it exists an active idle pane.
		pane=`$as_echo_n "$list_panes" | grep "^$myshell:[[:digit:]]\+:1$" | cut -d: -f2`
		test -z "$pane" && pane=`$as_echo_n "$list_panes" | grep -F "$myshell:" | head -n1 | cut -d: -f2`
		tmux send-keys -t "$window.$pane" "$a_prog" C-m
	else
		case `tmux list-panes -t "$window" | wc -l` in
			1 ) split-window -h -t "$window" "$a_prog" ;;
			* ) false ;;
		esac
	fi
}

# new_split
# ---------
# new_split iterates the list of windows of our target tmux session and
# for each of these windows, its run sub_new_split, the loop when sub-
# new_split succeeds.
new_split() {
	active_win=`tmux list-window | grep -F '(active)' | cut -d: -f1`
	sub_new_split "$active_win" || {
		for inactive_win in `tmux list-window | grep -Fv '(active)' | cut -d: -f1 | sort -g`
		do
			sub_new_split "$inactive_win" && pane_splited=yes && break
		done
		test -z "$pane_splited" && tmux new-window "$a_prog"
	}
}

# run_genprog
# ------------
# 
run_genprog() {
	if test -f "$cmd_set"; then
		project=`tmux list-sessions -F '#S:#{session_activity}' | sort -b -t: -k 2,2n | tail -n1 | cut -d: -f1`
		tag="${project##*-}"
		if test -n "$tag"; then
			grep -q "^$tag:" "$cmd_set" && a_prog=`cat "$cmd_set" | sed -n "s/^$tag:\(.*\)/\1/p" | eval $menu`
			test -n "$a_prog" && a_prog="$a_prog; sleep 4" && new_split
		fi
	fi
}

# choosen_file
# ----------
#
choosen_file() {
	# NOTE: The session's name should be the name of your project's directory.
	# Preserve the integrity of the dots in $project by translating them to \034 since tmux changes those
	# dot to underscores when naming sessions.
	project=`tmux list-sessions -F '#S:#{session_activity}' | sort -b -t: -k 2,2n | tail -n1 | cut -d: -f1 | tr _ . | tr "\034" _`
	project="${project_list%/}/${project%-*}"

	file_to_open=`(find "$project" -type f -a \( -path "$project/.git/*" -prune -o -print \)) 2>/dev/null | sed -e "s,^$project/,," | eval $menu`
	test -n "$file_to_open" && a_prog="$project/$file_to_open"
}

open_file() {
	choose_file
	if test "$a_prog"; then
		case "$a_prog" in
			*.mp4 | *.ogg | *.mp3 | *.flac | *.mkv | *.avi | *.m4v | *.mpeg | *.mpg | *.webm | *.mov | *.wav | *.flv | *.wma )
			prog_install "$media_player" && prog="$media_player" ;;
			*.png | *.jpeg | *.jpg | *.gif | *.xpm | *.bmp )
			prog_install "$image_viewer" && prog="$image_viewer" ;;
			*.pdf | *.epub | *.djvu )
			prog_install "$pdf_viewer" && prog="$pdf_viewer" ;;
			* )
			prog_install "$text_editor" && prog="$text_editor" ;;
		esac
		test -n "$prog" && a_prog="$prog $a_prog"
		new_split
	fi
}

main() {
	set_menu
	if test "$menu" && parse_config; then
		
	fi
}

if [ -z "$menu" ]; then
	$as_echo_n "$me: no menu were found." >&2
	exit 1
elif [ ! -d "$project_list" ]; then
	$as_echo_n "$me: directory '$project_list' doesn't exit" >&2
	exit 1
fi

while test $# -ne 0; do
	case "$1" in
		--open | -open | -u ) open_file ;;
		--runcmd | -runcmd | -r ) run_genprog ;;
		--find | -find | -f ) open_tmux ;;
		* ) $as_echo_n "$USAGE" ;;
	esac
	shift
done
