#!/bin/sh

set -x
set -ue

readonly alt_screen='\033[?1049h'
readonly normal_screen='\033[?1049l'
readonly hide_cur='\033[?25l'
readonly show_cur='\033[?25h'
readonly clear_screen='\033[2J'
readonly program=${0##*/}
readonly config_dir="${XDG_CONFIG_HOME:-"$HOME/.config"}"

readonly logo_ls=$(cat <<EOF
                                ┌────────────
                                │
                                │                                            ┌───────
                                │                             ┌───┐          │
            ┌──┐                │                             │   │          │
            │  │                │                             │   │          │
            │  │           ┌────┼─────┬─────┬──────┬──┐       │   │    ┌─────┘
            │  │     ┌─    │    │     │     │      │  │       │   │    │
────────────┘  │     │     │    │     │     │      │  │       │   └────┼─────┐
               │     │     │    │     │     │      │  │       │        │     │
               │     │     │    │     │     └────  │  └───────┘        │     │
               ├─────┴─────┘    │     │            └──                 │     │
               │                │    ─┘                                │     │
               │                │            ──────────────────────────┘     │
               │                └─                                           │
         ──────┘                                                             │
                                                                             │
EOF
)
readonly logo_ms=$(cat <<EOF
                     ┌─────                           ┌───
                     │                                │
        ┌─┐          │                      ┌──┐      │
        │ │       ┌──┼───┬───┬───┬────┐     │  │  ┌───┘
        │ │   ┌─  │  │   │   │   │    │     │  │  │
────────┘ │   │   │  │   │   │   │    │     │  └──┼───┐
          │   │   │  │   │   │   │    │     │     │   │
          ├───┴───┘  │  ─┘   └─  │    └─────┘     │   │
          │          └─          └──              │   │
          │                              ─────────┘   │
       ───┘                                           │
EOF
)
readonly logo_ss='WFMUX'

readonly wfmux=$(cat<<EOF

     ┌──────────────┤ WFMUX
    ┌┴─────────────────────────────────────────────────┐
    │                                                  │
    ├───── Input a name for a new tmux session         │
    │                                                  │
    ├───── Input f«return» to select a project         │
    │                                                  │
    ├───── Input «return» to drop to the terminal      │
    │                                                  │
    └──────────────────────────────────────────────────┘
EOF
)

wfmux_config="${config_dir%%/}/wfmux/wfmux.conf"
use_xdg=yes
runner=entr
restarter=entr
restarter_templates="$HOME/.config/wfmux/stemplate"
runner_templates="$HOME/.config/wfmux/rtemplate"
explorer=nnn
searcher=fzf
window_attributes_rest=20x20+10+20
window_attributes_file_selector=20x20+10+20
window_attributes_input_box=20x20+10+20

project_directory=$(cat <<-EOF
	$HOME/projects
	$HOME/aprojects
	$HOME/oprojects
	EOF
)

programs=$(cat <<-EOF
	pdf:      zathura
	text:     nvim
	video:    ffmpeg
	audio:    aplay
	image:    feh
	database: program_name
	EOF
)

usage() {
	cat <<EOF
Build an awesome dev workflow with tmux, fzf, nnn, and entr.
usage: wfmux operation_name [-c|-config|--config config_file]
       wfmux [-h|-c|-help|-config|--help|--config]

Options:
     -h, -help, --help            print this help message.
     -c, -config, --config FILE   load FILE configuration file.

Operation names:
    open      fuzzyly select a project and open a new tmux session.
    auto      select set of files to watch and bind them to a commmand.
    explore   open your favorite file manager on a popup tmux pane.
    select    fuzzyly select a file to open provided that they exist
              a recently used tmux session which carries the name of your
              project.
    commit    add to the index and commit changes to local repository.
    push      push to the preconfigured remote repositories.
	switch    fuzzyly switch between branches of your local repository.
EOF
}

die() {
	printf '%s\n' "$*"
	exit 1
}

main() {
	emessage="is an unrecognized option, please try \`$program --usage'";

	if [ $# -eq 1 ]; then
		case $1 in
			push|commit|select|explore|auto|open)
				if [ -f "$wfmux_config" ]; then
					[ -r "$wfmux_config" ] || die "no permission to read '$wfmux_config'"
					. $wfmux_config        || die "could not source configuration file"
					check_config_variables
				fi
				eval "$1" ;;
			-h|-help|--help)
				usage ;;
			*)
				die "$1" "$emessage" ;;
		esac
	elif [ $# -eq 3 ]; then
		case $1 in
			push|commit|select|explore|auto|open)
				case $2 in
					-c|-config|--config)
						wfmux_config=$3
						[ -e "$wfmux_config" ] || die "'$wfmux_config' does not exist"
						[ -r "$wfmux_config" ] || die "no permission to read '$wfmux_config'"
						. $wfmux_config        || die "could not source configuration file"
						check_config_variables
						eval "$1" ;;
					*)
						die "$2" "$emessage" ;;
				esac ;;
			*)
				die "$1" "$emessage" ;;
		esac
	else
		die "invalid option count, please try \`$program --usage'"
	fi
}

## Check if variables are unset or null	and if set then
## check if the data is somehow our expectation.
## We won't have to rely on `set -u`, we would want to output an error
## message if one of these variables aren't set/sane.
check_config_variables() {
	emessage="$program: ('$config_file'): "
	window_regex='^[[:digit:]]+x[[:digit:]]+\+[[:digit:]]+\+[[:digit:]]+$'

	for parameter in use_xdg automater searcher explorer window_attributes_rest \
	                 window_attributes_file_selector project_directory; do
		eval "parameter=\${$parameter:-NaN}"
		[ "$parameter" = NaN ] && die "$emessage" "'$parameter' isn't set"
	done
	
	## check for sane values
	(
		{ who=window_attributes_rest; printf '%s' "$window_attributes_rest" | grep -Eq "$window_regex"; }                   &&
		{ who=window_attributes_file_selector; printf '%s' "$window_attributes_file_selector" | grep -Eq "$window_regex"; } &&
		{ who=use_xdg; printf '%s' "$use_xdg" | grep -Eq '^true|false$'; }
	) || die "$emessage" "content of '$who' isn't valid"

	# now we should expect executable binaries/sh-functions/aliases
	OLD_IFS=$IFS; IFS=$':'
	for dependency in explorer automater searcher; do
		found=false
		for bin_dir in $PATH; do [ -x "${bin_dir%%/}/$dependency" ] && { found=true; break; }; done
		[ $found = false ] && die "$emessage" "'$dependency' isn't found"
	done

	# check if project dirs exist and are readable
	IFS=$'\n'
	for dir in $project_directory; do
		[ -d "$dir" ] || die "$emessage" "'$dir' isn't a directory"
		[ -r "$dir" ] || die "$emessage" "cannot list content of '$dir'"
	done
	IFS=$OLD_IFS
}

display_dashboard() {
	max="awk 'BEGIN{len = 0}; {nlen = length(\$0); if (nlen > len) len = nlen;}; END{print len}'"
	term_h=
	term_w=


	# generate help message for the dashboard
	gen_key_helper() {
		cat <<-EOF
			The following are tmux bindings related to WFMUX.

			M-$tbind_select:   fuzzyly open project files
			M-$tbind_explorer: open file manager
			M-$tbind_ops:      fuzzyly select other wfmux operations

			press 'q' to exit dashboard
		EOF
	}
	_print() { printf '\033[%s;%sf%s' "$1" "$2" "$3"; }

	# save initial terminal setting and will be set back after exiting dashboard
	init_stty=$(stty -g)
	printf '%s' "${alt_screen}${hide_cur}${clear_screen}"
	stty -echo

	while true; do
		[ "$(stty size)" = "$term_h $term_w" ] && { sleep 0.5; continue; }

		stty size | read term_w term_h
		if   [ $term_h -lt 32 -o $term_w -lt 97 ]; then _size=ss
		elif [ $term_w -le 155 ]; then _size=ms
		else _size=ls
		fi

		eval 'logo_h=$(printf "%s" "$logo_'$_size'" | wc -l);
		      logo_w=$(printf "%s" "$logo_'$_size'" | eval "$max")'
		gen_w=$(gen_key_helper | eval "$max")

		x=$(expr $term_h / 2 - $logo_h / 2)
		y=$(expr $term_w / 2 - $logo_h / 2)

		[ $gen_w -gt $logo_w ]                         &&
		gen_x=$(expr $x - \( $gen_w  - $logo_w \) / 2) ||
		gen_x=$(expr $x + \( $logo_w - $gen_w  \) / 2)

		printf '%s' "$clear_screen"
		eval 'printf "%s" "$logo'$_size'"' | while read line; do _print $x $y "$line"; y=$(($y+1)); done
		gen_key_helper | while read line; do _print $gen_x $y "$line"; y=$(($y+1)); done
	done &

	# get key from standard input and translate key code into a readable format
	responsizer=$!
	
}

## select a project and open a tmux session
open() {
	tmux list-sessions >/dev/null 2>&1 && {
		printf 'Choose an existing session to attach\n\n'
		tmux list-sessions | awk '{print "("NR") "$0}'
	}
	printf '%s\n' "$wfmux"
	read -p "⟩⟩ " input
	printf '%s' "$clear_scr"

	if expr "$input" : '^[0-9][0-9]*$'
	then
		session_name=$(tmux list-sessions -F '#S' | sed -n "${input}p")
		[ -n "$session_name" ] && tmux attach-session -t "$session_name"
	else
		if [ "$input" = f -o "$input" = F ]
		then
			[ `printf '%s' "$project_directory" | wc -l` -ne 1 ] &&
			project_directory=$(printf '%s' "$project_directory" | eval "$searcher")
			[ -n "$project_directory" ] || return
			[ -r "$project_directory" ] || return

			project_name=$(ls -F "$project_directory" | sed -n 's&/$&&p' | eval "$searcher" | tr _ '\034' | tr . _)
			[ -z "$project_name" ] && return
			{
				tmux has-session    -t "$project_name" &&
				tmux new-session    -s "$project_name" ||
				tmux attach-session -t "$project_name"
			} >/dev/null 2>&1

		elif [ -z "$input" ]; then return
		else
			tmux new-session -s "$(printf '%s' "$input" | tr _ '\034' | tr . _)"
		fi
	fi
}

## select your project files to open
select() {
	:;
}

main "$@"
