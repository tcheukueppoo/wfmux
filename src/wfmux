#!/bin/sh

set -x
set -ue

readonly alt_screen='\033[?1049h'
readonly normal_screen='\033[?1049l'
readonly hide_cur='\033[?25l'
readonly show_cur='\033[?25h'
readonly clear_screen='\033[2J'
readonly program=${0##*/}
readonly config_dir="${XDG_CONFIG_HOME:-"$HOME/.config"}"

readonly logo_ls=$(cat <<EOF
                                ┌────────────
                                │
                                │                                            ┌───────
                                │                             ┌───┐          │
            ┌──┐                │                             │   │          │
            │  │                │                             │   │          │
            │  │           ┌────┼─────┬─────┬──────┬──┐       │   │    ┌─────┘
            │  │     ┌─    │    │     │     │      │  │       │   │    │
────────────┘  │     │     │    │     │     │      │  │       │   └────┼─────┐
               │     │     │    │     │     │      │  │       │        │     │
               │     │     │    │     │     └────  │  └───────┘        │     │
               ├─────┴─────┘    │     │            └──                 │     │
               │                │    ─┘                                │     │
               │                │            ──────────────────────────┘     │
               │                └─                                           │
         ──────┘                                                             │
                                                                             │
EOF
)
readonly logo_ms=$(cat <<EOF
                     ┌─────                           ┌───
                     │                                │
        ┌─┐          │                      ┌──┐      │
        │ │       ┌──┼───┬───┬───┬────┐     │  │  ┌───┘
        │ │   ┌─  │  │   │   │   │    │     │  │  │
────────┘ │   │   │  │   │   │   │    │     │  └──┼───┐
          │   │   │  │   │   │   │    │     │     │   │
          ├───┴───┘  │  ─┘   └─  │    └─────┘     │   │
          │          └─          └──              │   │
          │                              ─────────┘   │
       ───┘                                           │
EOF
)
readonly logo_ss='WFMUX'

readonly wfmux=$(cat<<EOF

     ┌──────────────┤ WFMUX
    ┌┴─────────────────────────────────────────────────┐
    │                                                  │
    ├───── Input a name for a new tmux session         │
    │                                                  │
    ├───── Input f«return» to select a project         │
    │                                                  │
    ├───── Input «return» to drop to the terminal      │
    │                                                  │
    └──────────────────────────────────────────────────┘
EOF
)

wfmux_config="${config_dir%%/}/wfmux/wfmux.conf"
use_xdg=yes
runner=entr
restarter=entr
restarter_templates="$HOME/.config/wfmux/stemplate"
runner_templates="$HOME/.config/wfmux/rtemplate"
explorer=nnn
searcher=fzf
window_attributes_rest=20x20+10+20
window_attributes_file_selector=20x20+10+20
window_attributes_input_box=20x20+10+20

project_directory=$(cat <<-EOF
	$HOME/projects
	$HOME/aprojects
	$HOME/oprojects
	EOF
)

programs=$(cat <<-EOF
	pdf:      zathura
	text:     nvim
	video:    ffmpeg
	audio:    aplay
	image:    feh
	database: program_name
	EOF
)

usage() {
	cat <<EOF
Build an awesome dev workflow with tmux, fzf, nnn, and entr.
usage: wfmux [ [-c|-config|--config] *config_file* ] *operation_name*
       wfmux [ -h | -help | --help ]

Options:
     -h, -help, --help            print this help message.
     -c, -config, --config FILE   load *FILE* configuration file.

Operation names:
    open      fuzzyly select a project and open a new tmux session.
    auto      select set of files to watch and bind them to a commmand.
    explore   open your favorite file manager on a popup tmux pane.
    select    fuzzyly select a file to open provided that they exist
              a recently used tmux session which carries the name of your
              project.
    commit    add to the index and commit changes to local repository.
    push      push to the preconfigured remote repositories.
	switch    fuzzyly switch between branches of your local repository.
EOF
}

die() {
	printf '%s\n' "$*"
	exit 1
}

main() {
	operation=
	gave_config=false

	[ $# -eq 0 ] && usage
	until [ $# -eq 0 ]; do
		case $1 in
			-h|-help|--help)
				usage
				;;
			-c|-config|--config)
				[ $# -eq 1 ] && wfmux_config=$2 || usage
				gave_config=true
				shift
				;;
			push|commit|select|explore|auto|open)
				operation=$1
				if [ -f "$wfmux_config" ]; then
					[ -r "$wfmux_config" ] || die "no permission to read '$wfmux_config'"
					. $wfmux_config        || die "could not source configuration file"
				fi
				;;
			*)
				die "'$1' is an unrecognized option, please try \`$program --help'"
				;;
		esac
		shift
	done
	[ $gave_config = true ] && check_config_variables
	eval "$operation"
}

## Check if variables are unset or null	and if set then
## check if the data is somehow our expectation.
## we won't have to rely on `set -u`, we would want to output a custom 
## error message if one of these variables aren't set/sane.
check_config_variables() {
	_error="$program: ('$config_file'):"

	for parameter in use_xdg searcher explorer window_attributes_rest tbind_ops dash_color \
	                 window_attributes_file_selector project_directory tbind_select tbind_explore    \
					 window_attributes_input_box runner restarter; do
		eval "parameter=\${$parameter:-UNSET}"
		[ "$parameter" = UNSET ] && die "$_error '$parameter' isn't set"
	done

	## check if we got sane values
	config_die() { die "$_error content of \`$1' is not valid"; }
	window_regex='[[:digit:]]+x[[:digit:]]+\+[[:digit:]]+\+[[:digit:]]+$'
	{
		expr "$window_attributes_rest"          : "$window_regex" || config_die window_attributes_rest
		expr "$window_attributes_file_selector" : "$window_regex" || config_die window_attributes_file_selector
		expr "$window_attributes_input_box"     : "$window_regex" || config_die window_attributes_input_box
		expr "$use_xdg"                         : 'yes|no$'       || config_die use_xdg
		expr "$dash_color"                      : '[0-9]$'        || config_die dash_color
	} >/dev/null

	for cv in explorer runner restarter searcher; do
		command -v `eval "printf '%s'" "\$$cv"` || die "$error_ '$cv' not found"
	done

	OLD_IFS=$IFS; IFS=$'\n'
	for cv in $project_directory; do
		[ -d "$cv" ] || die "$_error '$cv' is not a directory"
		[ -r "$cv" ] || die "$_error cannot list content of '$cv'"
	done
	IFS=$OLD_IFS
}

display_dashboard() {
	max="awk 'BEGIN{len = 0}; {nlen = length(\$0); if (nlen > len) len = nlen;}; END{print len}'"
	term_h=
	term_w=


	# generate help message for the dashboard
	gen_key_helper() {
		cat <<-EOF
			The following are tmux bindings related to WFMUX.

			M-$tbind_select:   fuzzyly open project files
			M-$tbind_explorer: open file manager
			M-$tbind_ops:      fuzzyly select other wfmux operations

			press 'q' to exit dashboard
		EOF
	}
	_print() { printf '\033[%s;%sf%s' "$1" "$2" "$3"; }

	# save initial terminal setting and will be set back after exiting dashboard
	init_stty=$(stty -g)
	printf '%s' "${alt_screen}${hide_cur}${clear_screen}"
	stty -echo

	while true; do
		[ "$(stty size)" = "$term_h $term_w" ] && { sleep 0.5; continue; }

		stty size | read term_w term_h
		if   [ $term_h -lt 32 -o $term_w -lt 97 ]; then _size=ss
		elif [ $term_w -le 155 ]; then _size=ms
		else _size=ls
		fi

		eval 'logo_h=$(printf "%s" "$logo_'$_size'" | wc -l);
		      logo_w=$(printf "%s" "$logo_'$_size'" | eval "$max")'
		gen_w=$(gen_key_helper | eval "$max")

		x=$(expr $term_h / 2 - $logo_h / 2)
		y=$(expr $term_w / 2 - $logo_h / 2)

		[ $gen_w -gt $logo_w ]                         &&
		gen_x=$(expr $x - \( $gen_w  - $logo_w \) / 2) ||
		gen_x=$(expr $x + \( $logo_w - $gen_w  \) / 2)

		printf '%s' "$clear_screen"
		eval 'printf "%s" "$logo'$_size'"' | while read line; do _print $x $y "$line"; y=$(($y+1)); done
		gen_key_helper | while read line; do _print $gen_x $y "$line"; y=$(($y+1)); done
	done &

	# get key from standard input and translate key code into a readable format
	responsizer=$!
	
}

## select a project and open a tmux session
open() {
	tmux list-sessions >/dev/null 2>&1 && {
		printf 'Choose an existing session to attach\n\n'
		tmux list-sessions | awk '{print "("NR") "$0}'
	}
	printf '%s\n' "$wfmux"
	read -p "⟩⟩ " input
	printf '%s' "$clear_scr"

	if expr "$input" : '^[0-9][0-9]*$'
	then
		session_name=$(tmux list-sessions -F '#S' | sed -n "${input}p")
		[ -n "$session_name" ] && tmux attach-session -t "$session_name"
	else
		if [ "$input" = f -o "$input" = F ]
		then
			[ `printf '%s' "$project_directory" | wc -l` -ne 1 ] &&
			project_directory=$(printf '%s' "$project_directory" | eval "$searcher")
			[ -n "$project_directory" ] || return
			[ -r "$project_directory" ] || return

			project_name=$(ls -F "$project_directory" | sed -n 's&/$&&p' | eval "$searcher" | tr _ '\034' | tr . _)
			[ -z "$project_name" ] && return
			{
				tmux has-session    -t "$project_name" &&
				tmux new-session    -s "$project_name" ||
				tmux attach-session -t "$project_name"
			} >/dev/null 2>&1

		elif [ -z "$input" ]; then return
		else
			tmux new-session -s "$(printf '%s' "$input" | tr _ '\034' | tr . _)"
		fi
	fi
}

## select your project files to open
select() {
	:;
}

main "$@"
